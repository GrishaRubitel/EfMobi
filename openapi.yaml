openapi: "3.0.1"
info:
  title: Music Lib API
  version: "0.2"
  description: |
    API для управления музыкальной библиотекой

    Основные функции API включают управление треками и артистами - добавление, изменение, получение списков и ссылок на Spotify/YouTube
    
    Для Effective Mobile!
servers:
  - url: http://localhost:7557/api
    description: API библиотеки

paths:
  /ping:
    get:
      description: Проверка сервиса на работоспособность. Ручка безобидна, можно дергать сколько угодно
      responses:
        "200":
          description: Сервер готов обрабатывать запросы
          content:
            text/plain:
              schema:
                type: string
                example: sounds good
        "500":
          description: Сервер не готов обрабатывать запросы
  /execute_dml:
    post:
      description: Ручка позволяет автоматически заполнить базу данных предопределенными данными
      responses:
        "201":
          description: DML файл исполнен
          content:
            text/plain:
              schema:
                type: string
                example: dml executed successfully
        "409":
          description: DML файл был исполнен ранее, процедура остановлена
          content:
            application/json:
              schema:
                type: object
                properties:
                  reason:
                    type: string
                    example: "dml already executed"
        "500":
          description: Сервер не готов обрабатывать запросы или произошла какая-то внутренняя ошибка
  /sound/info:
    get:
      description: Получение информации о треке/списке треков с одинаковым названием
      parameters:
        - name: title
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/title"
        - name: artist
          in: query
          schema:
            $ref: "#/components/schemas/artist"
        - $ref: "#/components/parameters/paginationLimit"
        - $ref: "#/components/parameters/paginationOffset"
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sound_data'
        '400':
          description: Некоректный запрос от пользователя
          content:
            application/json:
              schema:
                type: object
                properties:
                  reason:
                    type: string
                    example: "title field required"
        '500':
          description: Сервер не готов обрабатывать запросы или произошла какая-то внутренняя ошибка
  /sound/whole_lib:
    get:
      description: Получение информации о всей музыкальной библиотеке с пагинацией и фильтрацией по всем полям базы данных
      parameters:
        - name: title
          in: query
          schema:
            $ref: "#/components/schemas/title"
        - name: artist
          in: query
          schema:
            $ref: "#/components/schemas/artist"
        # - name: release_date
        #   in: query
        #   schema:
        #     $ref: "#/components/schemas/release_date"
        - name: lyrics
          in: query
          schema:
            $ref: "#/components/schemas/lyrics"
        - name: spotify_link
          in: query
          schema:
            $ref: "#/components/schemas/spotify_link"
        - name: spotify_id
          in: query
          schema:
            $ref: "#/components/schemas/spotify_id"
        - name: video_link
          in: query
          schema:
            $ref: "#/components/schemas/video_link"
        - $ref: "#/components/parameters/paginationLimit"
        - $ref: "#/components/parameters/paginationOffset"
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sound_data'
        '500':
          description: Сервер не готов обрабатывать запросы или произошла какая-то внутренняя ошибка
  /sound/delete:
    patch:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  $ref: "#/components/schemas/title"
                artist:
                  $ref: "#/components/schemas/artist"
              required:
                - title
                - artist
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sound_data'
        '400':
          description: Некоректный запрос от пользователя
          content:
            application/json:
              schema:
                type: object
                properties:
                  reason:
                    type: string
                    example: "title and artist fields are required"
        '404':
          description: Запрашиваемый трек не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  reason:
                    type: string
                    example: "no records found"
        '500':
          description: Сервер не готов обрабатывать запросы или произошла какая-то внутренняя ошибка
  /sound/add_track:
    post:
      description: Ручка для добавления нового трека в библотеку. Апишка, благодаря английскому бесплатному прокси, может сходить к Spotify Web API и запросить более полную и корректную информацию о добавляемом треке. Если срабатывает какая-то ошибка, и запрос к Spotify невозможен, в БД будет добавлена информация, переданная пользователем. В том числе может произойти добавление исполнителя в соответствующую таблицу БД, если он уже там не находится
      requestBody:
        description: Добавление нового трека
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  $ref: "#/components/schemas/title"
                artist:
                  $ref: "#/components/schemas/artist"
              required:
                - title
                - artist
      responses:
        '200':
          description: Трек добавлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sound_data'
        '400':
          description: Некоректный запрос от пользователя
          content:
            application/json:
              schema:
                type: object
                properties:
                  reason:
                    type: string
                    example: "title and artist fields are required"
        '500':
          description: Сервер не готов обрабатывать запросы или произошла какая-то внутренняя ошибка
  /sound/lyrics:
    get:
      description: Программа извлекает текст песни из базы данных и, если переменная limit или offset задана, извлекает определенное количество строк. Так как текст песни может быть не разбит на куплеты/припевы/бриджи пустыми строками, программа считает, что новая строка всегда начинается с большой буквы. Поэтому в данном случае происходит пагинация не по пустым строкам, обозначающих новую часть текста, а по строкам с заглавными буквами.
      parameters:
        - name: title
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/title"
        - name: artist
          in: query
          schema:
            $ref: "#/components/schemas/artist"
        - $ref: "#/components/parameters/paginationLimit"
        - $ref: "#/components/parameters/paginationOffset"
      responses:
        "200":
          description: |
            Сервер готов обрабатывать запросы, если отвечает "200 OK".
            Тело ответа не важно, достаточно вернуть "ok".
          content:
            text/plain:
              schema:
                type: string
                example: sounds good
        "400":
          description: Неверный формат запроса или его параметры.
        "500":
          description: Сервер не готов обрабатывать запросы или произошла какая-то внутренняя ошибка
  /sound/update:
    patch:
      description: Обновление информации о существующем треке
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  $ref: "#/components/schemas/title"
                artist:
                  $ref: "#/components/schemas/artist"
                release_date:
                  $ref: "#/components/schemas/release_date"
                lyrics:
                  $ref: "#/components/schemas/lyrics"
                spotify_link:
                  $ref: "#/components/schemas/spotify_link"
                spotify_id:
                  $ref: "#/components/schemas/spotify_id"
                video_link:
                  $ref: "#/components/schemas/video_link"
              required:
                - title
                - artist
      responses:
        '202':
          description: Запись обновлена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sound_data'
        '400':
          description: Некорректный запрос клиента
        '500':
          description: Сервер не готов обрабатывать запросы или произошла какая-то внутренняя ошибка
  /artist/info:
      get:
        description: Вывод информации об исполнителях
        parameters:
          - name: artist
            in: query
            schema:
              $ref: "#/components/schemas/artist"
          - $ref: "#/components/parameters/paginationLimit"
          - $ref: "#/components/parameters/paginationOffset"
        responses:
          '200':
            description: Ok
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/artist_data'
          '500':
            description: Сервер не готов обрабатывать запросы или произошла какая-то внутренняя ошибка
components:
  parameters:
    paginationLimit:
      in: query
      name: limit
      required: false
      description: |
        Максимальное число возвращаемых объектов. Используется для запросов с пагинацией.
        Сервер должен возвращать максимальное допустимое число объектов.
      schema:
        type: integer
        format: int32
        minimum: 0
        maximum: 100
        default: 10
    paginationOffset:
      in: query
      name: offset
      required: false
      description: |
        Какое количество объектов должно быть пропущено с начала. Используется для запросов с пагинацией.
      schema:
        type: integer
        format: int32
        default: 0
        minimum: 0
  schemas:
    artist:
      type: string
      description: Имя артиста или название группы
      example: Kali Uchis
    title:
      type: string
      description: Название трека
      example: Dead To Me
    release_date:
      type: string
      description: Дата релиза трека
      example: 2018-04-06
    lyrics:
      type: string
      description: Текст трека
      example: You're dead to me
                You're obsessed, just let me go
                You're dead to me
                I'm not somebody you know
                You're dead to me
                Could you just leave me alone?
                You're dead to me
    spotify_link:
      type: string
      description: Ссылка на трек в Spotify
      example: https://open.spotify.com/track/6LOZws7T3jqZz78unPgFF9
    spotify_id:
      type: string
      description: Идентификатор трека в Spotify
      example: 6LOZws7T3jqZz78unPgFF9
    video_link:
      type: string
      description: Ссылка на клип или визуализатор
      example: https://www.youtube.com/watch?v=OcUDK4kAUIw
    sound_data:
      required:
        - id
        - artist
        - title
        - release_date
        - lyrics
        - spotify_link
        - spotify_id
        - video_link
      type: object
      properties:
        id:
          type: integer
          example: 1
        artist: 
          type: string
          example: JPEGMafia
        title:
          type: string
          example: 1539 N. Calvert
        release_date:
          type: string
          example: 2018-08-16 (YYYY-MM-DD)
        lyrics:
          type: string
          example: |
            Bruh, take your tree out my backwood
            Made the beat 'cause I'm that good
            Got your girl on her hands, Johnny 5 with the cans
        spotify_link:
          type: string
          example: https://open.spotify.com/track/6XyxCBp6x3jvtxXvMN5sAA?si=8c635f25d6214a51
        spotify_id:
          type: string
          example: 6XyxCBp6x3jvtxXvMN5sAA
        video_link:
          type: string
          example: https://www.youtube.com/watch?v=PO3mri47s7M
    artist_data:
      required:
        - artist
        - spotify_link
        - spotify_id
        - video_link
      type: object
      properties:
        artist: 
          type: string
          example: JPEGMafia
        spotify_link:
          type: string
          example: https://open.spotify.com/artist/6yJ6QQ3Y5l0s0tn7b0arrO
        spotify_id:
          type: string
          example: 6yJ6QQ3Y5l0s0tn7b0arrO
        video_link:
          type: string
          example: https://www.youtube.com/@JPEGMAFIA
        genres:
          type: array
          items:
            type: string
            enum:
              - alternative hip hop
              - experimental hip hop
              - industrial hip hop
